"""Type stubs for the Rust backend module."""

from __future__ import annotations
from typing import Any
from typing_extensions import Self

__version__: str

class RustBlock:
    namespace: str
    id: str
    properties: dict[str, str]
    
    def __init__(self, namespace: str, block_id: str | None = None, properties: dict[str, str] | None = None) -> None: ...
    def name(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    
    @classmethod
    def from_name(cls, name: str, properties: dict[str, str] | None = None) -> Self: ...
    @classmethod
    def from_palette(cls, tag: dict[str, str]) -> Self: ...
    @classmethod
    def from_numeric_id(cls, block_id: int, data: int = 0) -> Self: ...

class RustOldBlock:
    id: int
    data: int
    
    def __init__(self, block_id: int, data: int = 0) -> None: ...
    def convert(self) -> RustBlock: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class StremBlocksIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> RustBlock: ...

class PyNbtValue:
    value: Any
    def __repr__(self) -> str: ...

class PyNbtCompound:
    data: dict[str, PyNbtValue]
    def __init__(self) -> None: ...
    def get(self, key: str) -> PyNbtValue | None: ...
    def set(self, key: str, value: PyNbtValue) -> None: ...
    def __getitem__(self, key: str) -> PyNbtValue | None: ...
    def __setitem__(self, key: str, value: PyNbtValue) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def keys(self) -> list[str]: ...


class PyNbtFile:
    name: str
    value: PyNbtCompound
    def __init__(self, name: str) -> None: ...
    @classmethod
    def load(cls, filename: str) -> Self: ...
    @classmethod
    def from_bytes(cls, data: bytes) -> Self: ...
    def __getitem__(self, key: str) -> PyNbtValue: ...
    def get(self, key: str) -> PyNbtValue | None: ...

class RustChunk:
    def __init__(self, nbt_data: PyNbtFile) -> None: ...
    def get_block(self, x: int, y: int, z: int) -> RustBlock | None: ...
    def set_block(self, x: int, y: int, z: int, block: RustBlock) -> None: ...
    def stream_blocks(self, index: int = 0, section: int | None = None, force_new: bool = False) -> StremBlocksIterator: ...
    def from_region(self, region: RustRegion, chunk_x: int, chunk_z: int) -> Self: ...

class RustRegion:
    data: bytes | None

    def __init__(self, data: list[int] | None = None) -> None: ...
    @classmethod
    def from_file(cls, path: str) -> Self: ...
    def get_chunk(self, x: int, z: int) -> RustChunk | None: ...
    def chunk_data(self, x: int, z: int) -> bytes | None: ...
    def chunk_location(self, x: int, z: int) -> tuple[int, int]: ...
    def header_offset(self, chunk_x: int, chunk_z: int) -> int: ...
    def from_region(self, region_x: int, region_y: int) -> Self: ...

# NBT classes
class NbtValue:
    value: Any

    def __repr__(self) -> str: ...

class NbtCompound:
    data: dict[str, NbtValue]

    def __init__(self) -> None: ...
    def get(self, key: str) -> NbtValue | None: ...
    def set(self, key: str, value: NbtValue) -> None: ...
    def __getitem__(self, key: str) -> NbtValue: ...
    def __setitem__(self, key: str, value: NbtValue) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def keys(self) -> list[str]: ...

class NbtFile:
    name: str
    value: NbtCompound

    def __init__(self, name: str) -> None: ...
    @classmethod
    def load(cls, filename: str) -> Self: ...
    @classmethod
    def from_bytes(cls, data: list[int]) -> Self: ...
    def __getitem__(self, key: str) -> NbtValue: ...
    def get(self, key: str) -> NbtValue | None: ...
